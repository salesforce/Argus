options {
STATIC = false;
LOOKAHEAD = 1;
DEBUG_PARSER = false;
}

PARSER_BEGIN(MetricReader)
/* Copyright (c) 2014, Salesforce.com, Inc.
 * All rights reserved.
 *  
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 *   
 *      Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 *
 *      Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *      Neither the name of Salesforce.com nor the names of its contributors may be used to endorse or promote products derived from this software
 *      without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
package com.salesforce.dva.argus.service.metric;

import java.io.*;
import java.util.*;
import com.salesforce.dva.argus.entity.Metric;
import com.salesforce.dva.argus.service.DiscoveryService;
import com.salesforce.dva.argus.service.TSDBService;
import com.salesforce.dva.argus.service.metric.transform.Transform;
import com.salesforce.dva.argus.service.metric.transform.TransformFactory;
import com.salesforce.dva.argus.service.tsdb.MetricQuery;
import com.salesforce.dva.argus.service.tsdb.MetricQuery.Aggregator;
import com.salesforce.dva.argus.system.SystemException;
import com.google.inject.Inject;
import static com.salesforce.dva.argus.system.SystemAssert.*;

public class MetricReader<T> {

  	private TSDBService tsdbService;
  	private DiscoveryService discoveryService;
  	private TransformFactory factory;

	@Inject
    MetricReader(TSDBService tsdbService, DiscoveryService discoveryService, TransformFactory factory) {
        this((Reader)null);
        this.tsdbService = tsdbService;
        this.discoveryService = discoveryService;
        this.factory = factory;
    }

    public static boolean isValid(Collection<String> expressions) {
        boolean result = true;
        if(expressions != null) {
            MetricReader reader = new MetricReader((TSDBService)null, (DiscoveryService)null, (TransformFactory)null);
            for(String expression : expressions) {
                try {
                    if(!reader.isValidExpression(expression)) {
                        result = false;
                        break;
                    }
                } catch (Exception ex) {
                    result = false;
                    break;
                }
            }
        }
        return result;
    }

    public static boolean isValid(String expression) {
        return isValid(Arrays.asList(new String[] {expression}));
    }

	public enum TimeUnit {

        SECOND("s", 1000),
        MINUTE("m", 60 * SECOND.getValue()),
        HOUR("h", 60 * MINUTE.getValue()),
        DAY("d", 24 * HOUR.getValue());

        private final String _unit;
        private final long _value;

        private TimeUnit(String unit, long value) {
            _unit = unit;
            _value = value;
        }

        public String getUnit() {
            return _unit;
        }

        public long getValue() {
            return _value;
        }

        public static TimeUnit fromString(String text) {
			if (text != null) {
				for (TimeUnit unit : TimeUnit.values()) {
					if (text.equalsIgnoreCase(unit.getUnit())) {
						return unit;
					}
				}
			}
			throw new SystemException(text + ": This time unit is not supported.", new UnsupportedOperationException());
        }
    }

}

PARSER_END(MetricReader)

SKIP : { " " }
SKIP : { "\n" | "\r" | "\r\n" }

TOKEN : { < #TSDB_ALLOWED_TEXT : ( <DIGIT> | <LETTER> | <HYPHEN> | <PERIOD> | <UNDERSCORE> | <FWD_SLASH> | <ASTERISK> | <QUESTION> | <SQUARE_OPEN> | <SQUARE_CLOSE> | <OR> )+ > }
TOKEN : { < #TAGK : <TSDB_ALLOWED_TEXT> > }
TOKEN : { < #TAGV : <TSDB_ALLOWED_TEXT>> }
TOKEN : { < #TAG : <TAGK>"="<TAGV> > }
TOKEN : { < #DIGIT : ["0"-"9"] > }
TOKEN : { < #LETTER :  ["a"-"z","A"-"Z"] > }
TOKEN : { < #HYPHEN : "-" > }
TOKEN : { < #PERIOD : "." > }
TOKEN : { < #UNDERSCORE : "_" > }
TOKEN : { < #FWD_SLASH : "/" > }
TOKEN : { < #ASTERISK : "*" > }
TOKEN : { < #QUESTION : "?" > }
TOKEN : { < #SQUARE_OPEN : "[" > }
TOKEN : { < #SQUARE_CLOSE : "]" > }
TOKEN : { < #OR : "|" > }
TOKEN : { < #DOLLAR : "$" > }
TOKEN : { < #POUND : "#" > }
TOKEN : { < #NOT : "!" > }
TOKEN : { < #TIME_UNIT : "s" | "m" | "h" | "d" > }
TOKEN : { < #ANYTHING : ~["#"] > }

TOKEN : { < IDENTITY : "IDENTITY" > }
TOKEN : { < SUM : "SUM" > }
TOKEN : { < SUM_V : "SUM_V" > }
TOKEN : { < DIVIDE : "DIVIDE" > }
TOKEN : { < DIVIDE_V : "DIVIDE_V" > }
TOKEN : { < DIFF : "DIFF" > }
TOKEN : { < DIFF_V : "DIFF_V" > }
TOKEN : { < MULTIPLY : "MULTIPLY" > }
TOKEN : { < SCALE : "SCALE" > }
TOKEN : { < SCALE_V : "SCALE_V" > }
TOKEN : { < AVERAGE : "AVERAGE" > }
TOKEN : { < INTEGRAL : "INTEGRAL" > }
TOKEN : { < DERIVATIVE : "DERIVATIVE" > }
TOKEN : { < MIN : "MIN" > }
TOKEN : { < MAX : "MAX" > }
TOKEN : { < AVERAGEBELOW : "AVERAGEBELOW" > }
TOKEN : { < PERCENTILE : "PERCENTILE" > }
TOKEN : { < MOVINGAVERAGE : "MOVINGAVERAGE" > }
TOKEN : { < ZEROIFMISSINGSUM : "ZEROIFMISSINGSUM" > }
TOKEN : { < ABSOLUTE : "ABSOLUTE" > }
TOKEN : { < ALIAS : "ALIAS" > }
TOKEN : { < ALIASBYTAG : "ALIASBYTAG" > }
TOKEN : { < NORMALIZE : "NORMALIZE" > }
TOKEN : { < NORMALIZE_V : "NORMALIZE_V" > }
TOKEN : { < UNION : "UNION" > }
TOKEN : { < COUNT : "COUNT" > }
TOKEN : { < GROUP : "GROUP" > }
TOKEN : { < ABOVE : "ABOVE" > }
TOKEN : { < BELOW : "BELOW" > }
TOKEN : { < PROPAGATE : "PROPAGATE" > }
TOKEN : { < MOVING : "MOVING" > }
TOKEN : { < EXCLUDE : "EXCLUDE" > }
TOKEN : { < INCLUDE : "INCLUDE" > }
TOKEN : { < HIGHEST : "HIGHEST" > }
TOKEN : { < LOWEST : "LOWEST" > }
TOKEN : { < LIMIT : "LIMIT" > }
TOKEN : { < RANGE : "RANGE" > }
TOKEN : { < FILL : "FILL" > }
TOKEN : { < FILL_CALCULATE : "FILL_CALCULATE" > }
TOKEN : { < LOG : "LOG" > }
TOKEN : { < CULL_ABOVE : "CULL_ABOVE" > }
TOKEN : { < CULL_BELOW : "CULL_BELOW" > }
TOKEN : { < SORT : "SORT" > }
TOKEN : { < SHIFT : "SHIFT" > }
TOKEN : { < DOWNSAMPLE : "DOWNSAMPLE" > }
TOKEN : { < DEVIATION : "DEVIATION" > }
TOKEN : { < JOIN : "JOIN" > }
TOKEN : { < CONSECUTIVE : "CONSECUTIVE" > }
TOKEN : { < HW_FORECAST : "HW_FORECAST" > }
TOKEN : { < HW_DEVIATION : "HW_DEVIATION" > }
TOKEN : { < ANOMALY_STL : "ANOMALY_STL" > }
TOKEN : { < ANOMALY_DENSITY : "ANOMALY_DENSITY" > }
TOKEN : { < ANOMALY_ZSCORE : "ANOMALY_ZSCORE" > }
TOKEN : { < ANOMALY_KMEANS : "ANOMALY_KMEANS" > }
TOKEN : { < ANOMALY_RPCA : "ANOMALY_RPCA" > }
TOKEN : { < GROUPBY : "GROUPBY" > }

TOKEN : { < COLON : ":" > }
TOKEN : { < COMMA : "," > }
TOKEN : { < LEFT_CURLY : "{" > }
TOKEN : { < RIGHT_CURLY : "}" > }
TOKEN : { < LEFT_PARENTHESIS : "(" > }
TOKEN : { < RIGHT_PARENTHESIS : ")" > }
TOKEN : { < AGGREGATOR : "avg" | "sum" | "min" | "max" | "dev" | "zimsum" | "minmin" | "minmax" > }

TOKEN : { < TIME : (<DIGIT>)+ | <HYPHEN>(<DIGIT>)+<TIME_UNIT> > }
TOKEN : { < DOWNSAMPLER : (<DIGIT>)+<TIME_UNIT><HYPHEN><AGGREGATOR> > }

TOKEN : { < NAMESPACE : <TSDB_ALLOWED_TEXT> > }
TOKEN : { < SCOPE : <TSDB_ALLOWED_TEXT> > }
TOKEN : { < METRIC : <TSDB_ALLOWED_TEXT> > }
TOKEN : { < TAGS : <TAG>(<COMMA><TAG>)* > }
//TOKEN : { < CONSTANT : <DOLLAR>(<TSDB_ALLOWED_TEXT>)+ > }
TOKEN : { < CONSTANT : <POUND>(<ANYTHING>)+<POUND> > }

boolean isValidExpression(String expression) :
{}
{
  	{
  	  	return start(expression, 0, true, (Class<T>) Metric.class) != null;
  	}
}

List<T> parse(String expression, long relativeTo, Class<T> clazz) :
{}
{
  	{
  	  	return start(expression, relativeTo, false, clazz);
  	}
}


private List<T> start(String expression, long relativeTo, boolean syntaxOnly, Class<T> clazz) :
{
  	List<T> result = new ArrayList<T>();
}
{
  	{
        requireState(syntaxOnly || tsdbService != null, "TSDB service can only be null when syntax validation is being performed.");
        ReInit(new StringReader(expression));
  	}
        (result = expression(relativeTo, syntaxOnly, clazz) | result = function(relativeTo, syntaxOnly, clazz))<EOF>
	{
        return result;
    }
}

private List<T> function(long relativeTo, boolean syntaxOnly, Class<T> clazz) :
{
  	List<T> totalResult = new ArrayList<T>();
  	List<T> result = new ArrayList<T>();
  	List<String> constants = new ArrayList<String>();
  	String functionName, constant = "";
  	Token t = null;
}
{
	functionName = functionName()
	<LEFT_PARENTHESIS>
		(
		result = expression(relativeTo, syntaxOnly, clazz)
		{ totalResult.addAll(result); }
		| 
		result = function(relativeTo, syntaxOnly, clazz)
		{ totalResult.addAll(result); }
		| 
		t = <CONSTANT>
			{
				constant = t.image;
				constant = constant.substring(1, constant.length() - 1);
				constants.add(constant);
			}
		)
		(
		  <COMMA>
          ( 
            result = expression(relativeTo, syntaxOnly, clazz)
            { totalResult.addAll(result); }
			|
            result = function(relativeTo, syntaxOnly, clazz)
            { totalResult.addAll(result); }
			|
			t = <CONSTANT>
			{
				constant = t.image;
				constant = constant.substring(1, constant.length() - 1);
				constants.add(constant);
			}  
          )
		)*
	<RIGHT_PARENTHESIS>
	{
	  	return evaluateFunction(functionName, totalResult, constants, relativeTo, syntaxOnly, clazz);
	}
}


private String functionName() :
{
  	Token t = null;
}
{
	t = <IDENTITY>
	{ return t.image; }			
	|
	t = <MULTIPLY>
	{ return t.image; }
	|
	t = <AVERAGE>
	{ return t.image; }
	|
	t = <INTEGRAL>
	{ return t.image; }
	|
	t = <DERIVATIVE>
	{ return t.image; }
	|
	t = <MIN>
	{ return t.image; }
	|
	t = <MAX>
	{ return t.image; }
	|
	t = <ZEROIFMISSINGSUM>
	{ return t.image; }
	|
	t = <ABSOLUTE>
	{ return t.image; }
	|
	t = <UNION>
	{ return t.image; }
	|
	t = <COUNT>
	{ return t.image; }
	|
	t = <GROUP>
	{ return t.image; }
	|
	t = <AVERAGEBELOW>
	{ return t.image; }
	|
	t = <PERCENTILE>
	{ return t.image; }
	|
	t = <MOVINGAVERAGE>
	{ return t.image; }
	|
	t = <MOVING>
	{ return t.image; }
	|
	t = <SCALE>
	{ return t.image; } 
	|
	t = <SCALE_V>
	{ return t.image; } 
	|
	t = <DIFF>
	{ return t.image; }
	|
	t = <DIFF_V>
	{ return t.image; }
	|
	t = <SUM>
	{ return t.image; }
	|
	t = <SUM_V>
	{ return t.image; }
	|
	t = <DIVIDE>
	{ return t.image; }
	|
	t = <DIVIDE_V>
	{ return t.image; }
	|
	t = <ALIAS>
	{ return t.image; }
	|
	t = <ALIASBYTAG>
	{ return t.image; }
	|
	t = <PROPAGATE>
	{ return t.image; }
	|
	t = <NORMALIZE>
	{ return t.image; }
	|
	t = <NORMALIZE_V>
	{ return t.image; }
	|
	t = <ABOVE>
	{ return t.image; }
	|	
	t = <BELOW>
	{ return t.image; }
	|	
	t = <INCLUDE>
	{ return t.image; }
	|	
	t = <EXCLUDE>
	{ return t.image; }
	|	
	t = <HIGHEST>
	{ return t.image; }
	|	
	t = <LOWEST>
	{ return t.image; }
	|	
	t = <LIMIT>
	{ return t.image; }
	|	
	t = <RANGE>
	{ return t.image; }
	|	
	t = <FILL>
	{ return t.image; }
	|
	t = <FILL_CALCULATE>
	{ return t.image; }
	|	
	t = <LOG>
	{ return t.image; }
	|	
	t = <CULL_ABOVE>
	{ return t.image; }
	|	
	t = <CULL_BELOW>
	{ return t.image; }
	|	
	t = <SORT>
	{ return t.image; }
	|	
	t = <SHIFT>
	{ return t.image; }
	|	
	t = <DOWNSAMPLE>
	{ return t.image; }
	|	
	t = <DEVIATION>
	{ return t.image; }
	|	
	t = <JOIN>
	{ return t.image; }
    |    
    t = <CONSECUTIVE>
    { return t.image; }
	|
	t = <HW_FORECAST>
	{ return t.image; }
	|
	t = <HW_DEVIATION>
	{ return t.image; }
	|
	t = <ANOMALY_STL>
	{ return t.image; }
    |
	t = <ANOMALY_DENSITY>
	{ return t.image; }
	|
	t = <ANOMALY_ZSCORE>
	{ return t.image; }
	|
    t = <ANOMALY_KMEANS>
    { return t.image; }
    |
    t = <ANOMALY_RPCA>
    { return t.image; }
    | 
    t = <GROUPBY>
    { return t.image; }
}

private List<T> evaluateFunction(String functionName, List<T> result, List<String> constants, long relativeTo, boolean syntaxOnly, Class<T> clazz) :
{}
{
  	{
  	  	if(MetricQuery.class.equals(clazz)) {
  	  		return (List<T>) result;
  	  	} else if(Metric.class.equals(clazz)) {
  	  	  	if(syntaxOnly) {
				return (List<T>) Arrays.asList( new Metric[] { new Metric("test","metric") });
	  	  	} else {
	  	  	    if(TransformFactory.Function.FILL.getName().equals(functionName) && result.isEmpty()) {
	  	  	      	constants.add(String.valueOf(relativeTo));	  	  	    }
	  	  	  	Transform transform = factory.getTransform(functionName);
				return (List<T>) ((constants == null || constants.isEmpty()) ? transform.transform((List<Metric>) result) : transform.transform((List<Metric>) result, constants));
	  	  	}
	  	} else {
	  	  	throw new IllegalArgumentException("Invalid class type: " + clazz);
	  	}
	}
}

/**
 * The metric expression is now of the form:
 *
 *  	start:end:scope:metric{tagk=tagv}:aggregator:downsampler:namespace
 *
 * We moved namespace to the very end because with namespace being optional, the parser cannot really
 * decide whether the given expression has namespace:scope:metric or just scope:metric. Even with a
 * larger local lookahead, it becomes very complex to make that decision since there are more optional
 * entities further down the expression like tags and downsampler. Hence in lieu of greater complexity,
 * we decided to move it to the very end. 
 *  
 */
private List<T> expression(long relativeTo, boolean syntaxOnly, Class<T> clazz) :
{
  	Long startTimestamp = null;
  	Long endTimestamp = null;
  	String namespace = null;
  	String scope = null;
  	String metric = null;
  	Map<String, String> tags = new HashMap<String, String>();
  	Aggregator aggregator = null;
  	Aggregator downsampler = null;
  	Long downsamplingPeriod = null;
  	String downsampleTokenStr = null;
}
{ 	
  	startTimestamp = getTime(relativeTo)<COLON>
  	(endTimestamp = getTime(relativeTo)<COLON>)?
  	scope = getString() <COLON> metric = getString()
  	(<LEFT_CURLY> tags = getTags() <RIGHT_CURLY>)?
  	<COLON>aggregator = getAggregator()
  	(LOOKAHEAD(2) <COLON>downsampleTokenStr = getDownsampleToken())?
  	(<COLON>namespace = getString())?
	{
	  	if(MetricQuery.class.equals(clazz)) {
	  	  	downsampler = downsampleTokenStr != null ? getDownsampler(downsampleTokenStr) : null;
			downsamplingPeriod = downsampleTokenStr != null ? getDownsamplingPeriod(downsampleTokenStr): null;
			endTimestamp = endTimestamp == null ? relativeTo : endTimestamp;
	        MetricQuery query = new MetricQuery(scope, metric, tags, startTimestamp, endTimestamp);
	        query.setNamespace(namespace);
	        query.setAggregator(aggregator);
	        query.setDownsampler(downsampler);
	        query.setDownsamplingPeriod(downsamplingPeriod);
	        List<MetricQuery> queries = discoveryService.getMatchingQueries(query);
	        return (List<T>) queries;
	  	} else if(Metric.class.equals(clazz)) {
			if(syntaxOnly) {
	            return (List<T>) Arrays.asList( new Metric[] { new Metric("test","metric") });
	        } else {
	          	downsampler = downsampleTokenStr != null ? getDownsampler(downsampleTokenStr) : null;
				downsamplingPeriod = downsampleTokenStr != null ? getDownsamplingPeriod(downsampleTokenStr): null;
				endTimestamp = endTimestamp == null ? relativeTo : endTimestamp;
		        MetricQuery query = new MetricQuery(scope, metric, tags, startTimestamp, endTimestamp);
		        query.setNamespace(namespace);
		        query.setAggregator(aggregator);
		        query.setDownsampler(downsampler);
		        query.setDownsamplingPeriod(downsamplingPeriod);
		        List<MetricQuery> queries = discoveryService.getMatchingQueries(query);
				List<Metric> metrics = new ArrayList<Metric>();
	            Map<MetricQuery, List<Metric>> metricsMap = tsdbService.getMetrics(queries);
	            for(List<Metric> m : metricsMap.values()) {
					metrics.addAll(m);
	            }
	            return (List<T>) metrics;
	        }
	  	} else {
			throw new IllegalArgumentException("Invalid class type: " + clazz);
	  	}
	}
}

private Long getTime(long relativeTo) :
{
  	Token t = null;
  	Token t1 = null;
}
{
	t = <TIME>
	{
	  	try
	  	{
		  	String timeStr = t.image;
		  	if(timeStr.charAt(0) == '-') {
				String timeDigits = timeStr.substring(1, timeStr.length() - 1);
				String timeUnit = timeStr.substring(timeStr.length() - 1);
	  	  		Long time = Long.parseLong(timeDigits);
	  	  		TimeUnit unit = TimeUnit.fromString(timeUnit);
	  	  		return (relativeTo - (time * unit.getValue())) / 1000 * 1000;
		  	}
		  	return Long.parseLong(timeStr);
		} catch(NumberFormatException nfe) {
		  	throw new SystemException("Could not parse time.", nfe);
		}
	}
}

private String getString() :
{
  	Token t = null;
}
{
  	t = <SCOPE>
  	{ return t.image; }
 	|
 	t = <METRIC>
  	{ return t.image; }
  	|
 	t = <NAMESPACE>
  	{ return t.image; }
 	|
  	t = <AGGREGATOR>
  	{ return t.image; }
 	|
  	t = <DOWNSAMPLER>
  	{ return t.image; }
}

private String getNamespace() :
{
  	Token t = null;
}
{
  	t = <NAMESPACE>
  	{ return t.image; }
}

private Map<String, String> getTags() :
{
  	Token t = null;
}
{
  	t = <TAGS>
  	{
  	  	Map<String, String> tagsMap = new HashMap<String, String>();
  	  	String tagsStr = t.image;
  	  	String[] tags = tagsStr.split(",");
  	  	for(String tag : tags) {
			String[] tagKVPair = tag.split("=");
			String tagK = tagKVPair[0];
			String tagV = tagKVPair[1];
			tagsMap.put(tagK, tagV);
  	 	}
  	 	return tagsMap;
  	}
}

private Aggregator getAggregator() :
{
  	Token t;
}
{
  	t = <AGGREGATOR>
  	{ return Aggregator.fromString(t.image); }
}

private String getDownsampleToken() :
{
  	Token t = null;
}
{
  	t = <DOWNSAMPLER>
  	{
  	  	return t.image;
  	}
}

private Aggregator getDownsampler(String token) :
{}
{
  	{
  	 	return Aggregator.fromString(token.split("-")[1]); 
  	}
}

private Long getDownsamplingPeriod(String token) :
{}
{
  	{
		String[] parts = token.split("-");
		String timeDigits = parts[0].substring(0, parts[0].length() - 1);
		String timeUnit = parts[0].substring(parts[0].length() - 1);
  	  	Long time = Long.parseLong(timeDigits);
  	  	TimeUnit unit = TimeUnit.fromString(timeUnit);
  	  	return time * unit.getValue();
  	}
}
